/* tslint:disable */
/* eslint-disable */
/**
 * PMM QAN API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
/**
 * Point contains values that represents abscissa (time) and ordinate (volume etc.)
 * of every point in a coordinate system of Sparklines.
 * @export
 * @interface InlineResponse2002Sparkline
 */
export interface InlineResponse2002Sparkline {
    /**
     * load is query_time / time_range.
     * @type {number}
     * @memberof InlineResponse2002Sparkline
     */
    load?: number;
    /**
     * Total time the statement spent reading blocks, in milliseconds (if track_io_timing is enabled, otherwise zero).
     * @type {number}
     * @memberof InlineResponse2002Sparkline
     */
    m_blk_read_time_sum_per_sec?: number;
    /**
     * Total time the statement spent writing blocks, in milliseconds (if track_io_timing is enabled, otherwise zero).
     * @type {number}
     * @memberof InlineResponse2002Sparkline
     */
    m_blk_write_time_sum_per_sec?: number;
    /**
     * The number of bytes sent to all clients.
     * @type {number}
     * @memberof InlineResponse2002Sparkline
     */
    m_bytes_sent_sum_per_sec?: number;
    /**
     * MongoDB metrics.
     * 
     * The number of returned documents.
     * @type {number}
     * @memberof InlineResponse2002Sparkline
     */
    m_docs_returned_sum_per_sec?: number;
    /**
     * The number of scanned documents.
     * @type {number}
     * @memberof InlineResponse2002Sparkline
     */
    m_docs_scanned_sum_per_sec?: number;
    /**
     * The filesort was performed on disk.
     * @type {number}
     * @memberof InlineResponse2002Sparkline
     */
    m_filesort_on_disk_sum_per_sec?: number;
    /**
     * The query used a filesort.
     * @type {number}
     * @memberof InlineResponse2002Sparkline
     */
    m_filesort_sum_per_sec?: number;
    /**
     * The query performed a full join (a join without indexes).
     * @type {number}
     * @memberof InlineResponse2002Sparkline
     */
    m_full_join_sum_per_sec?: number;
    /**
     * The query performed a full table scan.
     * @type {number}
     * @memberof InlineResponse2002Sparkline
     */
    m_full_scan_sum_per_sec?: number;
    /**
     * Similar to innodb_IO_r_ops, but the unit is bytes.
     * @type {number}
     * @memberof InlineResponse2002Sparkline
     */
    m_innodb_io_r_bytes_sum_per_sec?: number;
    /**
     * Counts the number of page read operations scheduled.
     * @type {number}
     * @memberof InlineResponse2002Sparkline
     */
    m_innodb_io_r_ops_sum_per_sec?: number;
    /**
     * Shows how long (in seconds) it took InnoDB to actually read the data from storage.
     * @type {number}
     * @memberof InlineResponse2002Sparkline
     */
    m_innodb_io_r_wait_sum_per_sec?: number;
    /**
     * Counts approximately the number of unique pages the query accessed.
     * @type {number}
     * @memberof InlineResponse2002Sparkline
     */
    m_innodb_pages_distinct_sum_per_sec?: number;
    /**
     * Shows how long (in seconds) the query spent either waiting to enter the InnoDB queue or inside that queue waiting for execution.
     * @type {number}
     * @memberof InlineResponse2002Sparkline
     */
    m_innodb_queue_wait_sum_per_sec?: number;
    /**
     * Shows how long (in seconds) the query waited for row locks.
     * @type {number}
     * @memberof InlineResponse2002Sparkline
     */
    m_innodb_rec_lock_wait_sum_per_sec?: number;
    /**
     * Total number of local blocks dirtied by the statement.
     * @type {number}
     * @memberof InlineResponse2002Sparkline
     */
    m_local_blks_dirtied_sum_per_sec?: number;
    /**
     * Total number of local block cache hits by the statement.
     * @type {number}
     * @memberof InlineResponse2002Sparkline
     */
    m_local_blks_hit_sum_per_sec?: number;
    /**
     * Total number of local blocks read by the statement.
     * @type {number}
     * @memberof InlineResponse2002Sparkline
     */
    m_local_blks_read_sum_per_sec?: number;
    /**
     * Total number of local blocks written by the statement.
     * @type {number}
     * @memberof InlineResponse2002Sparkline
     */
    m_local_blks_written_sum_per_sec?: number;
    /**
     * The time to acquire locks in seconds.
     * @type {number}
     * @memberof InlineResponse2002Sparkline
     */
    m_lock_time_sum_per_sec?: number;
    /**
     * The number of merge passes that the sort algorithm has had to do.
     * @type {number}
     * @memberof InlineResponse2002Sparkline
     */
    m_merge_passes_sum_per_sec?: number;
    /**
     * The number of queries without good index.
     * @type {number}
     * @memberof InlineResponse2002Sparkline
     */
    m_no_good_index_used_sum_per_sec?: number;
    /**
     * The number of queries without index.
     * @type {number}
     * @memberof InlineResponse2002Sparkline
     */
    m_no_index_used_sum_per_sec?: number;
    /**
     * Boolean metrics:
     * - *_sum_per_sec - how many times this matric was true.
     * 
     * Query Cache hits.
     * @type {number}
     * @memberof InlineResponse2002Sparkline
     */
    m_qc_hit_sum_per_sec?: number;
    /**
     * Shows how long the query is.
     * @type {number}
     * @memberof InlineResponse2002Sparkline
     */
    m_query_length_sum_per_sec?: number;
    /**
     * The statement execution time in seconds.
     * @type {number}
     * @memberof InlineResponse2002Sparkline
     */
    m_query_time_sum_per_sec?: number;
    /**
     * The response length of the query result in bytes.
     * @type {number}
     * @memberof InlineResponse2002Sparkline
     */
    m_response_length_sum_per_sec?: number;
    /**
     * Number of rows changed - UPDATE, DELETE, INSERT.
     * @type {number}
     * @memberof InlineResponse2002Sparkline
     */
    m_rows_affected_sum_per_sec?: number;
    /**
     * Number of rows scanned - SELECT.
     * @type {number}
     * @memberof InlineResponse2002Sparkline
     */
    m_rows_examined_sum_per_sec?: number;
    /**
     * The number of rows read from tables.
     * @type {number}
     * @memberof InlineResponse2002Sparkline
     */
    m_rows_read_sum_per_sec?: number;
    /**
     * The number of rows sent to the client.
     * @type {number}
     * @memberof InlineResponse2002Sparkline
     */
    m_rows_sent_sum_per_sec?: number;
    /**
     * The number of joins that used a range search on a reference table.
     * @type {number}
     * @memberof InlineResponse2002Sparkline
     */
    m_select_full_range_join_sum_per_sec?: number;
    /**
     * The number of joins without keys that check for key usage after each row.
     * @type {number}
     * @memberof InlineResponse2002Sparkline
     */
    m_select_range_check_sum_per_sec?: number;
    /**
     * The number of joins that used ranges on the first table.
     * @type {number}
     * @memberof InlineResponse2002Sparkline
     */
    m_select_range_sum_per_sec?: number;
    /**
     * Total number of shared blocks dirtied by the statement.
     * @type {number}
     * @memberof InlineResponse2002Sparkline
     */
    m_shared_blks_dirtied_sum_per_sec?: number;
    /**
     * PostgreSQL metrics.
     * 
     * Total number of shared block cache hits by the statement.
     * @type {number}
     * @memberof InlineResponse2002Sparkline
     */
    m_shared_blks_hit_sum_per_sec?: number;
    /**
     * Total number of shared blocks read by the statement.
     * @type {number}
     * @memberof InlineResponse2002Sparkline
     */
    m_shared_blks_read_sum_per_sec?: number;
    /**
     * Total number of shared blocks written by the statement.
     * @type {number}
     * @memberof InlineResponse2002Sparkline
     */
    m_shared_blks_written_sum_per_sec?: number;
    /**
     * The number of sorts that were done using ranges.
     * @type {number}
     * @memberof InlineResponse2002Sparkline
     */
    m_sort_range_sum_per_sec?: number;
    /**
     * The number of sorted rows.
     * @type {number}
     * @memberof InlineResponse2002Sparkline
     */
    m_sort_rows_sum_per_sec?: number;
    /**
     * The number of sorts that were done by scanning the table.
     * @type {number}
     * @memberof InlineResponse2002Sparkline
     */
    m_sort_scan_sum_per_sec?: number;
    /**
     * Total number of temp blocks read by the statement.
     * @type {number}
     * @memberof InlineResponse2002Sparkline
     */
    m_temp_blks_read_sum_per_sec?: number;
    /**
     * Total number of temp blocks written by the statement.
     * @type {number}
     * @memberof InlineResponse2002Sparkline
     */
    m_temp_blks_written_sum_per_sec?: number;
    /**
     * Number of temporary tables created on disk for the query.
     * @type {number}
     * @memberof InlineResponse2002Sparkline
     */
    m_tmp_disk_tables_sum_per_sec?: number;
    /**
     * The querys temporary table was stored on disk.
     * @type {number}
     * @memberof InlineResponse2002Sparkline
     */
    m_tmp_table_on_disk_sum_per_sec?: number;
    /**
     * Total Size in bytes for all temporary tables used in the query.
     * @type {number}
     * @memberof InlineResponse2002Sparkline
     */
    m_tmp_table_sizes_sum_per_sec?: number;
    /**
     * The query created an implicit internal temporary table.
     * @type {number}
     * @memberof InlineResponse2002Sparkline
     */
    m_tmp_table_sum_per_sec?: number;
    /**
     * Number of temporary tables created on memory for the query.
     * @type {number}
     * @memberof InlineResponse2002Sparkline
     */
    m_tmp_tables_sum_per_sec?: number;
    /**
     * number of queries in bucket.
     * @type {number}
     * @memberof InlineResponse2002Sparkline
     */
    num_queries_per_sec?: number;
    /**
     * number of queries with errors.
     * @type {number}
     * @memberof InlineResponse2002Sparkline
     */
    num_queries_with_errors_per_sec?: number;
    /**
     * number of queries with warnings.
     * @type {number}
     * @memberof InlineResponse2002Sparkline
     */
    num_queries_with_warnings_per_sec?: number;
    /**
     * The serial number of the chart point from the largest time in the time interval to the lowest time in the time range.
     * @type {number}
     * @memberof InlineResponse2002Sparkline
     */
    point?: number;
    /**
     * Duration beetween two points.
     * @type {number}
     * @memberof InlineResponse2002Sparkline
     */
    time_frame?: number;
    /**
     * Time of point in format RFC3339.
     * @type {string}
     * @memberof InlineResponse2002Sparkline
     */
    timestamp?: string;
}

export function InlineResponse2002SparklineFromJSON(json: any): InlineResponse2002Sparkline {
    return InlineResponse2002SparklineFromJSONTyped(json, false);
}

export function InlineResponse2002SparklineFromJSONTyped(json: any, ignoreDiscriminator: boolean): InlineResponse2002Sparkline {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'load': !exists(json, 'load') ? undefined : json['load'],
        'm_blk_read_time_sum_per_sec': !exists(json, 'm_blk_read_time_sum_per_sec') ? undefined : json['m_blk_read_time_sum_per_sec'],
        'm_blk_write_time_sum_per_sec': !exists(json, 'm_blk_write_time_sum_per_sec') ? undefined : json['m_blk_write_time_sum_per_sec'],
        'm_bytes_sent_sum_per_sec': !exists(json, 'm_bytes_sent_sum_per_sec') ? undefined : json['m_bytes_sent_sum_per_sec'],
        'm_docs_returned_sum_per_sec': !exists(json, 'm_docs_returned_sum_per_sec') ? undefined : json['m_docs_returned_sum_per_sec'],
        'm_docs_scanned_sum_per_sec': !exists(json, 'm_docs_scanned_sum_per_sec') ? undefined : json['m_docs_scanned_sum_per_sec'],
        'm_filesort_on_disk_sum_per_sec': !exists(json, 'm_filesort_on_disk_sum_per_sec') ? undefined : json['m_filesort_on_disk_sum_per_sec'],
        'm_filesort_sum_per_sec': !exists(json, 'm_filesort_sum_per_sec') ? undefined : json['m_filesort_sum_per_sec'],
        'm_full_join_sum_per_sec': !exists(json, 'm_full_join_sum_per_sec') ? undefined : json['m_full_join_sum_per_sec'],
        'm_full_scan_sum_per_sec': !exists(json, 'm_full_scan_sum_per_sec') ? undefined : json['m_full_scan_sum_per_sec'],
        'm_innodb_io_r_bytes_sum_per_sec': !exists(json, 'm_innodb_io_r_bytes_sum_per_sec') ? undefined : json['m_innodb_io_r_bytes_sum_per_sec'],
        'm_innodb_io_r_ops_sum_per_sec': !exists(json, 'm_innodb_io_r_ops_sum_per_sec') ? undefined : json['m_innodb_io_r_ops_sum_per_sec'],
        'm_innodb_io_r_wait_sum_per_sec': !exists(json, 'm_innodb_io_r_wait_sum_per_sec') ? undefined : json['m_innodb_io_r_wait_sum_per_sec'],
        'm_innodb_pages_distinct_sum_per_sec': !exists(json, 'm_innodb_pages_distinct_sum_per_sec') ? undefined : json['m_innodb_pages_distinct_sum_per_sec'],
        'm_innodb_queue_wait_sum_per_sec': !exists(json, 'm_innodb_queue_wait_sum_per_sec') ? undefined : json['m_innodb_queue_wait_sum_per_sec'],
        'm_innodb_rec_lock_wait_sum_per_sec': !exists(json, 'm_innodb_rec_lock_wait_sum_per_sec') ? undefined : json['m_innodb_rec_lock_wait_sum_per_sec'],
        'm_local_blks_dirtied_sum_per_sec': !exists(json, 'm_local_blks_dirtied_sum_per_sec') ? undefined : json['m_local_blks_dirtied_sum_per_sec'],
        'm_local_blks_hit_sum_per_sec': !exists(json, 'm_local_blks_hit_sum_per_sec') ? undefined : json['m_local_blks_hit_sum_per_sec'],
        'm_local_blks_read_sum_per_sec': !exists(json, 'm_local_blks_read_sum_per_sec') ? undefined : json['m_local_blks_read_sum_per_sec'],
        'm_local_blks_written_sum_per_sec': !exists(json, 'm_local_blks_written_sum_per_sec') ? undefined : json['m_local_blks_written_sum_per_sec'],
        'm_lock_time_sum_per_sec': !exists(json, 'm_lock_time_sum_per_sec') ? undefined : json['m_lock_time_sum_per_sec'],
        'm_merge_passes_sum_per_sec': !exists(json, 'm_merge_passes_sum_per_sec') ? undefined : json['m_merge_passes_sum_per_sec'],
        'm_no_good_index_used_sum_per_sec': !exists(json, 'm_no_good_index_used_sum_per_sec') ? undefined : json['m_no_good_index_used_sum_per_sec'],
        'm_no_index_used_sum_per_sec': !exists(json, 'm_no_index_used_sum_per_sec') ? undefined : json['m_no_index_used_sum_per_sec'],
        'm_qc_hit_sum_per_sec': !exists(json, 'm_qc_hit_sum_per_sec') ? undefined : json['m_qc_hit_sum_per_sec'],
        'm_query_length_sum_per_sec': !exists(json, 'm_query_length_sum_per_sec') ? undefined : json['m_query_length_sum_per_sec'],
        'm_query_time_sum_per_sec': !exists(json, 'm_query_time_sum_per_sec') ? undefined : json['m_query_time_sum_per_sec'],
        'm_response_length_sum_per_sec': !exists(json, 'm_response_length_sum_per_sec') ? undefined : json['m_response_length_sum_per_sec'],
        'm_rows_affected_sum_per_sec': !exists(json, 'm_rows_affected_sum_per_sec') ? undefined : json['m_rows_affected_sum_per_sec'],
        'm_rows_examined_sum_per_sec': !exists(json, 'm_rows_examined_sum_per_sec') ? undefined : json['m_rows_examined_sum_per_sec'],
        'm_rows_read_sum_per_sec': !exists(json, 'm_rows_read_sum_per_sec') ? undefined : json['m_rows_read_sum_per_sec'],
        'm_rows_sent_sum_per_sec': !exists(json, 'm_rows_sent_sum_per_sec') ? undefined : json['m_rows_sent_sum_per_sec'],
        'm_select_full_range_join_sum_per_sec': !exists(json, 'm_select_full_range_join_sum_per_sec') ? undefined : json['m_select_full_range_join_sum_per_sec'],
        'm_select_range_check_sum_per_sec': !exists(json, 'm_select_range_check_sum_per_sec') ? undefined : json['m_select_range_check_sum_per_sec'],
        'm_select_range_sum_per_sec': !exists(json, 'm_select_range_sum_per_sec') ? undefined : json['m_select_range_sum_per_sec'],
        'm_shared_blks_dirtied_sum_per_sec': !exists(json, 'm_shared_blks_dirtied_sum_per_sec') ? undefined : json['m_shared_blks_dirtied_sum_per_sec'],
        'm_shared_blks_hit_sum_per_sec': !exists(json, 'm_shared_blks_hit_sum_per_sec') ? undefined : json['m_shared_blks_hit_sum_per_sec'],
        'm_shared_blks_read_sum_per_sec': !exists(json, 'm_shared_blks_read_sum_per_sec') ? undefined : json['m_shared_blks_read_sum_per_sec'],
        'm_shared_blks_written_sum_per_sec': !exists(json, 'm_shared_blks_written_sum_per_sec') ? undefined : json['m_shared_blks_written_sum_per_sec'],
        'm_sort_range_sum_per_sec': !exists(json, 'm_sort_range_sum_per_sec') ? undefined : json['m_sort_range_sum_per_sec'],
        'm_sort_rows_sum_per_sec': !exists(json, 'm_sort_rows_sum_per_sec') ? undefined : json['m_sort_rows_sum_per_sec'],
        'm_sort_scan_sum_per_sec': !exists(json, 'm_sort_scan_sum_per_sec') ? undefined : json['m_sort_scan_sum_per_sec'],
        'm_temp_blks_read_sum_per_sec': !exists(json, 'm_temp_blks_read_sum_per_sec') ? undefined : json['m_temp_blks_read_sum_per_sec'],
        'm_temp_blks_written_sum_per_sec': !exists(json, 'm_temp_blks_written_sum_per_sec') ? undefined : json['m_temp_blks_written_sum_per_sec'],
        'm_tmp_disk_tables_sum_per_sec': !exists(json, 'm_tmp_disk_tables_sum_per_sec') ? undefined : json['m_tmp_disk_tables_sum_per_sec'],
        'm_tmp_table_on_disk_sum_per_sec': !exists(json, 'm_tmp_table_on_disk_sum_per_sec') ? undefined : json['m_tmp_table_on_disk_sum_per_sec'],
        'm_tmp_table_sizes_sum_per_sec': !exists(json, 'm_tmp_table_sizes_sum_per_sec') ? undefined : json['m_tmp_table_sizes_sum_per_sec'],
        'm_tmp_table_sum_per_sec': !exists(json, 'm_tmp_table_sum_per_sec') ? undefined : json['m_tmp_table_sum_per_sec'],
        'm_tmp_tables_sum_per_sec': !exists(json, 'm_tmp_tables_sum_per_sec') ? undefined : json['m_tmp_tables_sum_per_sec'],
        'num_queries_per_sec': !exists(json, 'num_queries_per_sec') ? undefined : json['num_queries_per_sec'],
        'num_queries_with_errors_per_sec': !exists(json, 'num_queries_with_errors_per_sec') ? undefined : json['num_queries_with_errors_per_sec'],
        'num_queries_with_warnings_per_sec': !exists(json, 'num_queries_with_warnings_per_sec') ? undefined : json['num_queries_with_warnings_per_sec'],
        'point': !exists(json, 'point') ? undefined : json['point'],
        'time_frame': !exists(json, 'time_frame') ? undefined : json['time_frame'],
        'timestamp': !exists(json, 'timestamp') ? undefined : json['timestamp'],
    };
}

export function InlineResponse2002SparklineToJSON(value?: InlineResponse2002Sparkline | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'load': value.load,
        'm_blk_read_time_sum_per_sec': value.m_blk_read_time_sum_per_sec,
        'm_blk_write_time_sum_per_sec': value.m_blk_write_time_sum_per_sec,
        'm_bytes_sent_sum_per_sec': value.m_bytes_sent_sum_per_sec,
        'm_docs_returned_sum_per_sec': value.m_docs_returned_sum_per_sec,
        'm_docs_scanned_sum_per_sec': value.m_docs_scanned_sum_per_sec,
        'm_filesort_on_disk_sum_per_sec': value.m_filesort_on_disk_sum_per_sec,
        'm_filesort_sum_per_sec': value.m_filesort_sum_per_sec,
        'm_full_join_sum_per_sec': value.m_full_join_sum_per_sec,
        'm_full_scan_sum_per_sec': value.m_full_scan_sum_per_sec,
        'm_innodb_io_r_bytes_sum_per_sec': value.m_innodb_io_r_bytes_sum_per_sec,
        'm_innodb_io_r_ops_sum_per_sec': value.m_innodb_io_r_ops_sum_per_sec,
        'm_innodb_io_r_wait_sum_per_sec': value.m_innodb_io_r_wait_sum_per_sec,
        'm_innodb_pages_distinct_sum_per_sec': value.m_innodb_pages_distinct_sum_per_sec,
        'm_innodb_queue_wait_sum_per_sec': value.m_innodb_queue_wait_sum_per_sec,
        'm_innodb_rec_lock_wait_sum_per_sec': value.m_innodb_rec_lock_wait_sum_per_sec,
        'm_local_blks_dirtied_sum_per_sec': value.m_local_blks_dirtied_sum_per_sec,
        'm_local_blks_hit_sum_per_sec': value.m_local_blks_hit_sum_per_sec,
        'm_local_blks_read_sum_per_sec': value.m_local_blks_read_sum_per_sec,
        'm_local_blks_written_sum_per_sec': value.m_local_blks_written_sum_per_sec,
        'm_lock_time_sum_per_sec': value.m_lock_time_sum_per_sec,
        'm_merge_passes_sum_per_sec': value.m_merge_passes_sum_per_sec,
        'm_no_good_index_used_sum_per_sec': value.m_no_good_index_used_sum_per_sec,
        'm_no_index_used_sum_per_sec': value.m_no_index_used_sum_per_sec,
        'm_qc_hit_sum_per_sec': value.m_qc_hit_sum_per_sec,
        'm_query_length_sum_per_sec': value.m_query_length_sum_per_sec,
        'm_query_time_sum_per_sec': value.m_query_time_sum_per_sec,
        'm_response_length_sum_per_sec': value.m_response_length_sum_per_sec,
        'm_rows_affected_sum_per_sec': value.m_rows_affected_sum_per_sec,
        'm_rows_examined_sum_per_sec': value.m_rows_examined_sum_per_sec,
        'm_rows_read_sum_per_sec': value.m_rows_read_sum_per_sec,
        'm_rows_sent_sum_per_sec': value.m_rows_sent_sum_per_sec,
        'm_select_full_range_join_sum_per_sec': value.m_select_full_range_join_sum_per_sec,
        'm_select_range_check_sum_per_sec': value.m_select_range_check_sum_per_sec,
        'm_select_range_sum_per_sec': value.m_select_range_sum_per_sec,
        'm_shared_blks_dirtied_sum_per_sec': value.m_shared_blks_dirtied_sum_per_sec,
        'm_shared_blks_hit_sum_per_sec': value.m_shared_blks_hit_sum_per_sec,
        'm_shared_blks_read_sum_per_sec': value.m_shared_blks_read_sum_per_sec,
        'm_shared_blks_written_sum_per_sec': value.m_shared_blks_written_sum_per_sec,
        'm_sort_range_sum_per_sec': value.m_sort_range_sum_per_sec,
        'm_sort_rows_sum_per_sec': value.m_sort_rows_sum_per_sec,
        'm_sort_scan_sum_per_sec': value.m_sort_scan_sum_per_sec,
        'm_temp_blks_read_sum_per_sec': value.m_temp_blks_read_sum_per_sec,
        'm_temp_blks_written_sum_per_sec': value.m_temp_blks_written_sum_per_sec,
        'm_tmp_disk_tables_sum_per_sec': value.m_tmp_disk_tables_sum_per_sec,
        'm_tmp_table_on_disk_sum_per_sec': value.m_tmp_table_on_disk_sum_per_sec,
        'm_tmp_table_sizes_sum_per_sec': value.m_tmp_table_sizes_sum_per_sec,
        'm_tmp_table_sum_per_sec': value.m_tmp_table_sum_per_sec,
        'm_tmp_tables_sum_per_sec': value.m_tmp_tables_sum_per_sec,
        'num_queries_per_sec': value.num_queries_per_sec,
        'num_queries_with_errors_per_sec': value.num_queries_with_errors_per_sec,
        'num_queries_with_warnings_per_sec': value.num_queries_with_warnings_per_sec,
        'point': value.point,
        'time_frame': value.time_frame,
        'timestamp': value.timestamp,
    };
}


