/* tslint:disable */
/* eslint-disable */
/**
 * PMM API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: public
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import {
    InlineObject30,
    InlineObject30FromJSON,
    InlineObject30ToJSON,
    InlineObject31,
    InlineObject31FromJSON,
    InlineObject31ToJSON,
    InlineObject32,
    InlineObject32FromJSON,
    InlineObject32ToJSON,
    InlineObject33,
    InlineObject33FromJSON,
    InlineObject33ToJSON,
    InlineObject34,
    InlineObject34FromJSON,
    InlineObject34ToJSON,
    InlineObject35,
    InlineObject35FromJSON,
    InlineObject35ToJSON,
    InlineObject36,
    InlineObject36FromJSON,
    InlineObject36ToJSON,
    InlineResponse20019,
    InlineResponse20019FromJSON,
    InlineResponse20019ToJSON,
    InlineResponse20020,
    InlineResponse20020FromJSON,
    InlineResponse20020ToJSON,
    InlineResponse20021,
    InlineResponse20021FromJSON,
    InlineResponse20021ToJSON,
    InlineResponse20022,
    InlineResponse20022FromJSON,
    InlineResponse20022ToJSON,
    InlineResponse20023,
    InlineResponse20023FromJSON,
    InlineResponse20023ToJSON,
    InlineResponse20024,
    InlineResponse20024FromJSON,
    InlineResponse20024ToJSON,
    InlineResponseDefault1,
    InlineResponseDefault1FromJSON,
    InlineResponseDefault1ToJSON,
} from '../models';

export interface AddContainerNodeRequest {
    body: InlineObject30;
}

export interface AddGenericNodeRequest {
    body: InlineObject31;
}

export interface AddRemoteNodeRequest {
    body: InlineObject32;
}

export interface AddRemoteRDSNodeRequest {
    body: InlineObject33;
}

export interface GetNodeRequest {
    body: InlineObject34;
}

export interface ListNodesRequest {
    body: InlineObject35;
}

export interface RemoveNodeRequest {
    body: InlineObject36;
}

/**
 * 
 */
export class NodesApi extends runtime.BaseAPI {

    /**
     * AddContainerNode adds Container Node.
     */
    async addContainerNodeRaw(requestParameters: AddContainerNodeRequest): Promise<runtime.ApiResponse<InlineResponse20019>> {
        if (requestParameters.body === null || requestParameters.body === undefined) {
            throw new runtime.RequiredError('body','Required parameter requestParameters.body was null or undefined when calling addContainerNode.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        const response = await this.request({
            path: `/v1/inventory/Nodes/AddContainer`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: InlineObject30ToJSON(requestParameters.body),
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => InlineResponse20019FromJSON(jsonValue));
    }

    /**
     * AddContainerNode adds Container Node.
     */
    async addContainerNode(requestParameters: AddContainerNodeRequest): Promise<InlineResponse20019> {
        const response = await this.addContainerNodeRaw(requestParameters);
        return await response.value();
    }

    /**
     * AddGenericNode adds generic Node.
     */
    async addGenericNodeRaw(requestParameters: AddGenericNodeRequest): Promise<runtime.ApiResponse<InlineResponse20020>> {
        if (requestParameters.body === null || requestParameters.body === undefined) {
            throw new runtime.RequiredError('body','Required parameter requestParameters.body was null or undefined when calling addGenericNode.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        const response = await this.request({
            path: `/v1/inventory/Nodes/AddGeneric`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: InlineObject31ToJSON(requestParameters.body),
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => InlineResponse20020FromJSON(jsonValue));
    }

    /**
     * AddGenericNode adds generic Node.
     */
    async addGenericNode(requestParameters: AddGenericNodeRequest): Promise<InlineResponse20020> {
        const response = await this.addGenericNodeRaw(requestParameters);
        return await response.value();
    }

    /**
     * AddRemoteNode adds remote Node.
     */
    async addRemoteNodeRaw(requestParameters: AddRemoteNodeRequest): Promise<runtime.ApiResponse<InlineResponse20021>> {
        if (requestParameters.body === null || requestParameters.body === undefined) {
            throw new runtime.RequiredError('body','Required parameter requestParameters.body was null or undefined when calling addRemoteNode.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        const response = await this.request({
            path: `/v1/inventory/Nodes/AddRemote`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: InlineObject32ToJSON(requestParameters.body),
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => InlineResponse20021FromJSON(jsonValue));
    }

    /**
     * AddRemoteNode adds remote Node.
     */
    async addRemoteNode(requestParameters: AddRemoteNodeRequest): Promise<InlineResponse20021> {
        const response = await this.addRemoteNodeRaw(requestParameters);
        return await response.value();
    }

    /**
     * AddRemoteRDSNode adds remote RDS Node.
     */
    async addRemoteRDSNodeRaw(requestParameters: AddRemoteRDSNodeRequest): Promise<runtime.ApiResponse<InlineResponse20022>> {
        if (requestParameters.body === null || requestParameters.body === undefined) {
            throw new runtime.RequiredError('body','Required parameter requestParameters.body was null or undefined when calling addRemoteRDSNode.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        const response = await this.request({
            path: `/v1/inventory/Nodes/AddRemoteRDS`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: InlineObject33ToJSON(requestParameters.body),
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => InlineResponse20022FromJSON(jsonValue));
    }

    /**
     * AddRemoteRDSNode adds remote RDS Node.
     */
    async addRemoteRDSNode(requestParameters: AddRemoteRDSNodeRequest): Promise<InlineResponse20022> {
        const response = await this.addRemoteRDSNodeRaw(requestParameters);
        return await response.value();
    }

    /**
     * GetNode returns a single Node by ID.
     */
    async getNodeRaw(requestParameters: GetNodeRequest): Promise<runtime.ApiResponse<InlineResponse20023>> {
        if (requestParameters.body === null || requestParameters.body === undefined) {
            throw new runtime.RequiredError('body','Required parameter requestParameters.body was null or undefined when calling getNode.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        const response = await this.request({
            path: `/v1/inventory/Nodes/Get`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: InlineObject34ToJSON(requestParameters.body),
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => InlineResponse20023FromJSON(jsonValue));
    }

    /**
     * GetNode returns a single Node by ID.
     */
    async getNode(requestParameters: GetNodeRequest): Promise<InlineResponse20023> {
        const response = await this.getNodeRaw(requestParameters);
        return await response.value();
    }

    /**
     * ListNodes returns a list of all Nodes.
     */
    async listNodesRaw(requestParameters: ListNodesRequest): Promise<runtime.ApiResponse<InlineResponse20024>> {
        if (requestParameters.body === null || requestParameters.body === undefined) {
            throw new runtime.RequiredError('body','Required parameter requestParameters.body was null or undefined when calling listNodes.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        const response = await this.request({
            path: `/v1/inventory/Nodes/List`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: InlineObject35ToJSON(requestParameters.body),
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => InlineResponse20024FromJSON(jsonValue));
    }

    /**
     * ListNodes returns a list of all Nodes.
     */
    async listNodes(requestParameters: ListNodesRequest): Promise<InlineResponse20024> {
        const response = await this.listNodesRaw(requestParameters);
        return await response.value();
    }

    /**
     * RemoveNode removes Node.
     */
    async removeNodeRaw(requestParameters: RemoveNodeRequest): Promise<runtime.ApiResponse<object>> {
        if (requestParameters.body === null || requestParameters.body === undefined) {
            throw new runtime.RequiredError('body','Required parameter requestParameters.body was null or undefined when calling removeNode.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        const response = await this.request({
            path: `/v1/inventory/Nodes/Remove`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: InlineObject36ToJSON(requestParameters.body),
        });

        return new runtime.JSONApiResponse<any>(response);
    }

    /**
     * RemoveNode removes Node.
     */
    async removeNode(requestParameters: RemoveNodeRequest): Promise<object> {
        const response = await this.removeNodeRaw(requestParameters);
        return await response.value();
    }

}
