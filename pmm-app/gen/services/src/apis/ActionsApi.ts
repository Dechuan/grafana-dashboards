/* tslint:disable */
/* eslint-disable */
/**
 * PMM API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: public
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import {
    InlineObject45,
    InlineObject45FromJSON,
    InlineObject45ToJSON,
    InlineObject46,
    InlineObject46FromJSON,
    InlineObject46ToJSON,
    InlineObject47,
    InlineObject47FromJSON,
    InlineObject47ToJSON,
    InlineObject48,
    InlineObject48FromJSON,
    InlineObject48ToJSON,
    InlineObject49,
    InlineObject49FromJSON,
    InlineObject49ToJSON,
    InlineObject50,
    InlineObject50FromJSON,
    InlineObject50ToJSON,
    InlineObject51,
    InlineObject51FromJSON,
    InlineObject51ToJSON,
    InlineObject52,
    InlineObject52FromJSON,
    InlineObject52ToJSON,
    InlineObject53,
    InlineObject53FromJSON,
    InlineObject53ToJSON,
    InlineObject54,
    InlineObject54FromJSON,
    InlineObject54ToJSON,
    InlineObject55,
    InlineObject55FromJSON,
    InlineObject55ToJSON,
    InlineResponse20032,
    InlineResponse20032FromJSON,
    InlineResponse20032ToJSON,
    InlineResponse20033,
    InlineResponse20033FromJSON,
    InlineResponse20033ToJSON,
    InlineResponseDefault1,
    InlineResponseDefault1FromJSON,
    InlineResponseDefault1ToJSON,
} from '../models';

export interface CancelActionRequest {
    body: InlineObject45;
}

export interface GetActionRequest {
    body: InlineObject46;
}

export interface StartMongoDBExplainActionRequest {
    body: InlineObject47;
}

export interface StartMySQLExplainActionRequest {
    body: InlineObject48;
}

export interface StartMySQLExplainJSONActionRequest {
    body: InlineObject49;
}

export interface StartMySQLExplainTraditionalJSONActionRequest {
    body: InlineObject50;
}

export interface StartMySQLShowCreateTableActionRequest {
    body: InlineObject51;
}

export interface StartMySQLShowIndexActionRequest {
    body: InlineObject52;
}

export interface StartMySQLShowTableStatusActionRequest {
    body: InlineObject53;
}

export interface StartPostgreSQLShowCreateTableActionRequest {
    body: InlineObject54;
}

export interface StartPostgreSQLShowIndexActionRequest {
    body: InlineObject55;
}

/**
 * 
 */
export class ActionsApi extends runtime.BaseAPI {

    /**
     * CancelAction stops an Action.
     */
    async cancelActionRaw(requestParameters: CancelActionRequest): Promise<runtime.ApiResponse<object>> {
        if (requestParameters.body === null || requestParameters.body === undefined) {
            throw new runtime.RequiredError('body','Required parameter requestParameters.body was null or undefined when calling cancelAction.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        const response = await this.request({
            path: `/v1/management/Actions/Cancel`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: InlineObject45ToJSON(requestParameters.body),
        });

        return new runtime.JSONApiResponse<any>(response);
    }

    /**
     * CancelAction stops an Action.
     */
    async cancelAction(requestParameters: CancelActionRequest): Promise<object> {
        const response = await this.cancelActionRaw(requestParameters);
        return await response.value();
    }

    /**
     * GetAction gets an result of given Action.
     */
    async getActionRaw(requestParameters: GetActionRequest): Promise<runtime.ApiResponse<InlineResponse20032>> {
        if (requestParameters.body === null || requestParameters.body === undefined) {
            throw new runtime.RequiredError('body','Required parameter requestParameters.body was null or undefined when calling getAction.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        const response = await this.request({
            path: `/v1/management/Actions/Get`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: InlineObject46ToJSON(requestParameters.body),
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => InlineResponse20032FromJSON(jsonValue));
    }

    /**
     * GetAction gets an result of given Action.
     */
    async getAction(requestParameters: GetActionRequest): Promise<InlineResponse20032> {
        const response = await this.getActionRaw(requestParameters);
        return await response.value();
    }

    /**
     * StartMongoDBExplainAction starts MongoDB EXPLAIN Action.
     */
    async startMongoDBExplainActionRaw(requestParameters: StartMongoDBExplainActionRequest): Promise<runtime.ApiResponse<InlineResponse20033>> {
        if (requestParameters.body === null || requestParameters.body === undefined) {
            throw new runtime.RequiredError('body','Required parameter requestParameters.body was null or undefined when calling startMongoDBExplainAction.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        const response = await this.request({
            path: `/v1/management/Actions/StartMongoDBExplain`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: InlineObject47ToJSON(requestParameters.body),
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => InlineResponse20033FromJSON(jsonValue));
    }

    /**
     * StartMongoDBExplainAction starts MongoDB EXPLAIN Action.
     */
    async startMongoDBExplainAction(requestParameters: StartMongoDBExplainActionRequest): Promise<InlineResponse20033> {
        const response = await this.startMongoDBExplainActionRaw(requestParameters);
        return await response.value();
    }

    /**
     * StartMySQLExplainAction starts MySQL EXPLAIN Action with traditional output.
     */
    async startMySQLExplainActionRaw(requestParameters: StartMySQLExplainActionRequest): Promise<runtime.ApiResponse<InlineResponse20033>> {
        if (requestParameters.body === null || requestParameters.body === undefined) {
            throw new runtime.RequiredError('body','Required parameter requestParameters.body was null or undefined when calling startMySQLExplainAction.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        const response = await this.request({
            path: `/v1/management/Actions/StartMySQLExplain`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: InlineObject48ToJSON(requestParameters.body),
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => InlineResponse20033FromJSON(jsonValue));
    }

    /**
     * StartMySQLExplainAction starts MySQL EXPLAIN Action with traditional output.
     */
    async startMySQLExplainAction(requestParameters: StartMySQLExplainActionRequest): Promise<InlineResponse20033> {
        const response = await this.startMySQLExplainActionRaw(requestParameters);
        return await response.value();
    }

    /**
     * StartMySQLExplainJSONAction starts MySQL EXPLAIN Action with JSON output.
     */
    async startMySQLExplainJSONActionRaw(requestParameters: StartMySQLExplainJSONActionRequest): Promise<runtime.ApiResponse<InlineResponse20033>> {
        if (requestParameters.body === null || requestParameters.body === undefined) {
            throw new runtime.RequiredError('body','Required parameter requestParameters.body was null or undefined when calling startMySQLExplainJSONAction.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        const response = await this.request({
            path: `/v1/management/Actions/StartMySQLExplainJSON`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: InlineObject49ToJSON(requestParameters.body),
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => InlineResponse20033FromJSON(jsonValue));
    }

    /**
     * StartMySQLExplainJSONAction starts MySQL EXPLAIN Action with JSON output.
     */
    async startMySQLExplainJSONAction(requestParameters: StartMySQLExplainJSONActionRequest): Promise<InlineResponse20033> {
        const response = await this.startMySQLExplainJSONActionRaw(requestParameters);
        return await response.value();
    }

    /**
     * StartMySQLExplainTraditionalJSONAction starts MySQL EXPLAIN Action with traditional JSON output.
     */
    async startMySQLExplainTraditionalJSONActionRaw(requestParameters: StartMySQLExplainTraditionalJSONActionRequest): Promise<runtime.ApiResponse<InlineResponse20033>> {
        if (requestParameters.body === null || requestParameters.body === undefined) {
            throw new runtime.RequiredError('body','Required parameter requestParameters.body was null or undefined when calling startMySQLExplainTraditionalJSONAction.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        const response = await this.request({
            path: `/v1/management/Actions/StartMySQLExplainTraditionalJSON`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: InlineObject50ToJSON(requestParameters.body),
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => InlineResponse20033FromJSON(jsonValue));
    }

    /**
     * StartMySQLExplainTraditionalJSONAction starts MySQL EXPLAIN Action with traditional JSON output.
     */
    async startMySQLExplainTraditionalJSONAction(requestParameters: StartMySQLExplainTraditionalJSONActionRequest): Promise<InlineResponse20033> {
        const response = await this.startMySQLExplainTraditionalJSONActionRaw(requestParameters);
        return await response.value();
    }

    /**
     * StartMySQLShowCreateTableAction starts MySQL SHOW CREATE TABLE Action.
     */
    async startMySQLShowCreateTableActionRaw(requestParameters: StartMySQLShowCreateTableActionRequest): Promise<runtime.ApiResponse<InlineResponse20033>> {
        if (requestParameters.body === null || requestParameters.body === undefined) {
            throw new runtime.RequiredError('body','Required parameter requestParameters.body was null or undefined when calling startMySQLShowCreateTableAction.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        const response = await this.request({
            path: `/v1/management/Actions/StartMySQLShowCreateTable`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: InlineObject51ToJSON(requestParameters.body),
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => InlineResponse20033FromJSON(jsonValue));
    }

    /**
     * StartMySQLShowCreateTableAction starts MySQL SHOW CREATE TABLE Action.
     */
    async startMySQLShowCreateTableAction(requestParameters: StartMySQLShowCreateTableActionRequest): Promise<InlineResponse20033> {
        const response = await this.startMySQLShowCreateTableActionRaw(requestParameters);
        return await response.value();
    }

    /**
     * StartMySQLShowIndexAction starts MySQL SHOW INDEX Action.
     */
    async startMySQLShowIndexActionRaw(requestParameters: StartMySQLShowIndexActionRequest): Promise<runtime.ApiResponse<InlineResponse20033>> {
        if (requestParameters.body === null || requestParameters.body === undefined) {
            throw new runtime.RequiredError('body','Required parameter requestParameters.body was null or undefined when calling startMySQLShowIndexAction.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        const response = await this.request({
            path: `/v1/management/Actions/StartMySQLShowIndex`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: InlineObject52ToJSON(requestParameters.body),
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => InlineResponse20033FromJSON(jsonValue));
    }

    /**
     * StartMySQLShowIndexAction starts MySQL SHOW INDEX Action.
     */
    async startMySQLShowIndexAction(requestParameters: StartMySQLShowIndexActionRequest): Promise<InlineResponse20033> {
        const response = await this.startMySQLShowIndexActionRaw(requestParameters);
        return await response.value();
    }

    /**
     * StartMySQLShowTableStatusAction starts MySQL SHOW TABLE STATUS Action.
     */
    async startMySQLShowTableStatusActionRaw(requestParameters: StartMySQLShowTableStatusActionRequest): Promise<runtime.ApiResponse<InlineResponse20033>> {
        if (requestParameters.body === null || requestParameters.body === undefined) {
            throw new runtime.RequiredError('body','Required parameter requestParameters.body was null or undefined when calling startMySQLShowTableStatusAction.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        const response = await this.request({
            path: `/v1/management/Actions/StartMySQLShowTableStatus`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: InlineObject53ToJSON(requestParameters.body),
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => InlineResponse20033FromJSON(jsonValue));
    }

    /**
     * StartMySQLShowTableStatusAction starts MySQL SHOW TABLE STATUS Action.
     */
    async startMySQLShowTableStatusAction(requestParameters: StartMySQLShowTableStatusActionRequest): Promise<InlineResponse20033> {
        const response = await this.startMySQLShowTableStatusActionRaw(requestParameters);
        return await response.value();
    }

    /**
     * StartPostgreSQLShowCreateTableAction starts PostgreSQL SHOW CREATE TABLE Action.
     */
    async startPostgreSQLShowCreateTableActionRaw(requestParameters: StartPostgreSQLShowCreateTableActionRequest): Promise<runtime.ApiResponse<InlineResponse20033>> {
        if (requestParameters.body === null || requestParameters.body === undefined) {
            throw new runtime.RequiredError('body','Required parameter requestParameters.body was null or undefined when calling startPostgreSQLShowCreateTableAction.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        const response = await this.request({
            path: `/v1/management/Actions/StartPostgreSQLShowCreateTable`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: InlineObject54ToJSON(requestParameters.body),
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => InlineResponse20033FromJSON(jsonValue));
    }

    /**
     * StartPostgreSQLShowCreateTableAction starts PostgreSQL SHOW CREATE TABLE Action.
     */
    async startPostgreSQLShowCreateTableAction(requestParameters: StartPostgreSQLShowCreateTableActionRequest): Promise<InlineResponse20033> {
        const response = await this.startPostgreSQLShowCreateTableActionRaw(requestParameters);
        return await response.value();
    }

    /**
     * StartPostgreSQLShowIndexAction starts PostgreSQL SHOW INDEX Action.
     */
    async startPostgreSQLShowIndexActionRaw(requestParameters: StartPostgreSQLShowIndexActionRequest): Promise<runtime.ApiResponse<InlineResponse20033>> {
        if (requestParameters.body === null || requestParameters.body === undefined) {
            throw new runtime.RequiredError('body','Required parameter requestParameters.body was null or undefined when calling startPostgreSQLShowIndexAction.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        const response = await this.request({
            path: `/v1/management/Actions/StartPostgreSQLShowIndex`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: InlineObject55ToJSON(requestParameters.body),
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => InlineResponse20033FromJSON(jsonValue));
    }

    /**
     * StartPostgreSQLShowIndexAction starts PostgreSQL SHOW INDEX Action.
     */
    async startPostgreSQLShowIndexAction(requestParameters: StartPostgreSQLShowIndexActionRequest): Promise<InlineResponse20033> {
        const response = await this.startPostgreSQLShowIndexActionRaw(requestParameters);
        return await response.value();
    }

}
