/* tslint:disable */
/* eslint-disable */
/**
 * PMM API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: public
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import {
    InlineObject10,
    InlineObject10FromJSON,
    InlineObject10ToJSON,
    InlineObject11,
    InlineObject11FromJSON,
    InlineObject11ToJSON,
    InlineObject12,
    InlineObject12FromJSON,
    InlineObject12ToJSON,
    InlineObject13,
    InlineObject13FromJSON,
    InlineObject13ToJSON,
    InlineObject14,
    InlineObject14FromJSON,
    InlineObject14ToJSON,
    InlineObject15,
    InlineObject15FromJSON,
    InlineObject15ToJSON,
    InlineObject16,
    InlineObject16FromJSON,
    InlineObject16ToJSON,
    InlineObject17,
    InlineObject17FromJSON,
    InlineObject17ToJSON,
    InlineObject18,
    InlineObject18FromJSON,
    InlineObject18ToJSON,
    InlineObject19,
    InlineObject19FromJSON,
    InlineObject19ToJSON,
    InlineObject20,
    InlineObject20FromJSON,
    InlineObject20ToJSON,
    InlineObject21,
    InlineObject21FromJSON,
    InlineObject21ToJSON,
    InlineObject22,
    InlineObject22FromJSON,
    InlineObject22ToJSON,
    InlineObject23,
    InlineObject23FromJSON,
    InlineObject23ToJSON,
    InlineObject24,
    InlineObject24FromJSON,
    InlineObject24ToJSON,
    InlineObject25,
    InlineObject25FromJSON,
    InlineObject25ToJSON,
    InlineObject26,
    InlineObject26FromJSON,
    InlineObject26ToJSON,
    InlineObject27,
    InlineObject27FromJSON,
    InlineObject27ToJSON,
    InlineObject28,
    InlineObject28FromJSON,
    InlineObject28ToJSON,
    InlineObject29,
    InlineObject29FromJSON,
    InlineObject29ToJSON,
    InlineObject4,
    InlineObject4FromJSON,
    InlineObject4ToJSON,
    InlineObject5,
    InlineObject5FromJSON,
    InlineObject5ToJSON,
    InlineObject6,
    InlineObject6FromJSON,
    InlineObject6ToJSON,
    InlineObject7,
    InlineObject7FromJSON,
    InlineObject7ToJSON,
    InlineObject8,
    InlineObject8FromJSON,
    InlineObject8ToJSON,
    InlineObject9,
    InlineObject9FromJSON,
    InlineObject9ToJSON,
    InlineResponse20010,
    InlineResponse20010FromJSON,
    InlineResponse20010ToJSON,
    InlineResponse20011,
    InlineResponse20011FromJSON,
    InlineResponse20011ToJSON,
    InlineResponse20012,
    InlineResponse20012FromJSON,
    InlineResponse20012ToJSON,
    InlineResponse20013,
    InlineResponse20013FromJSON,
    InlineResponse20013ToJSON,
    InlineResponse20014,
    InlineResponse20014FromJSON,
    InlineResponse20014ToJSON,
    InlineResponse20015,
    InlineResponse20015FromJSON,
    InlineResponse20015ToJSON,
    InlineResponse20016,
    InlineResponse20016FromJSON,
    InlineResponse20016ToJSON,
    InlineResponse20017,
    InlineResponse20017FromJSON,
    InlineResponse20017ToJSON,
    InlineResponse20018,
    InlineResponse20018FromJSON,
    InlineResponse20018ToJSON,
    InlineResponse2004,
    InlineResponse2004FromJSON,
    InlineResponse2004ToJSON,
    InlineResponse2005,
    InlineResponse2005FromJSON,
    InlineResponse2005ToJSON,
    InlineResponse2006,
    InlineResponse2006FromJSON,
    InlineResponse2006ToJSON,
    InlineResponse2007,
    InlineResponse2007FromJSON,
    InlineResponse2007ToJSON,
    InlineResponse2008,
    InlineResponse2008FromJSON,
    InlineResponse2008ToJSON,
    InlineResponse2009,
    InlineResponse2009FromJSON,
    InlineResponse2009ToJSON,
    InlineResponseDefault1,
    InlineResponseDefault1FromJSON,
    InlineResponseDefault1ToJSON,
} from '../models';

export interface AddExternalExporterRequest {
    body: InlineObject4;
}

export interface AddMongoDBExporterRequest {
    body: InlineObject5;
}

export interface AddMySQLdExporterRequest {
    body: InlineObject6;
}

export interface AddNodeExporterRequest {
    body: InlineObject7;
}

export interface AddPMMAgentRequest {
    body: InlineObject8;
}

export interface AddPostgresExporterRequest {
    body: InlineObject9;
}

export interface AddProxySQLExporterRequest {
    body: InlineObject10;
}

export interface AddQANMongoDBProfilerAgentRequest {
    body: InlineObject11;
}

export interface AddQANMySQLPerfSchemaAgentRequest {
    body: InlineObject12;
}

export interface AddQANMySQLSlowlogAgentRequest {
    body: InlineObject13;
}

export interface AddQANPostgreSQLPgStatementsAgentRequest {
    body: InlineObject14;
}

export interface AddRDSExporterRequest {
    body: InlineObject15;
}

export interface ChangeExternalExporterRequest {
    body: InlineObject16;
}

export interface ChangeMongoDBExporterRequest {
    body: InlineObject17;
}

export interface ChangeMySQLdExporterRequest {
    body: InlineObject18;
}

export interface ChangeNodeExporterRequest {
    body: InlineObject19;
}

export interface ChangePostgresExporterRequest {
    body: InlineObject20;
}

export interface ChangeProxySQLExporterRequest {
    body: InlineObject21;
}

export interface ChangeQANMongoDBProfilerAgentRequest {
    body: InlineObject22;
}

export interface ChangeQANMySQLPerfSchemaAgentRequest {
    body: InlineObject23;
}

export interface ChangeQANMySQLSlowlogAgentRequest {
    body: InlineObject24;
}

export interface ChangeQANPostgreSQLPgStatementsAgentRequest {
    body: InlineObject25;
}

export interface ChangeRDSExporterRequest {
    body: InlineObject26;
}

export interface GetAgentRequest {
    body: InlineObject27;
}

export interface ListAgentsRequest {
    body: InlineObject28;
}

export interface RemoveAgentRequest {
    body: InlineObject29;
}

/**
 * 
 */
export class AgentsApi extends runtime.BaseAPI {

    /**
     * AddExternalExporter adds external_exporter Agent.
     */
    async addExternalExporterRaw(requestParameters: AddExternalExporterRequest): Promise<runtime.ApiResponse<InlineResponse2004>> {
        if (requestParameters.body === null || requestParameters.body === undefined) {
            throw new runtime.RequiredError('body','Required parameter requestParameters.body was null or undefined when calling addExternalExporter.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        const response = await this.request({
            path: `/v1/inventory/Agents/AddExternalExporter`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: InlineObject4ToJSON(requestParameters.body),
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => InlineResponse2004FromJSON(jsonValue));
    }

    /**
     * AddExternalExporter adds external_exporter Agent.
     */
    async addExternalExporter(requestParameters: AddExternalExporterRequest): Promise<InlineResponse2004> {
        const response = await this.addExternalExporterRaw(requestParameters);
        return await response.value();
    }

    /**
     * AddMongoDBExporter adds mongodb_exporter Agent.
     */
    async addMongoDBExporterRaw(requestParameters: AddMongoDBExporterRequest): Promise<runtime.ApiResponse<InlineResponse2005>> {
        if (requestParameters.body === null || requestParameters.body === undefined) {
            throw new runtime.RequiredError('body','Required parameter requestParameters.body was null or undefined when calling addMongoDBExporter.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        const response = await this.request({
            path: `/v1/inventory/Agents/AddMongoDBExporter`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: InlineObject5ToJSON(requestParameters.body),
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => InlineResponse2005FromJSON(jsonValue));
    }

    /**
     * AddMongoDBExporter adds mongodb_exporter Agent.
     */
    async addMongoDBExporter(requestParameters: AddMongoDBExporterRequest): Promise<InlineResponse2005> {
        const response = await this.addMongoDBExporterRaw(requestParameters);
        return await response.value();
    }

    /**
     * AddMySQLdExporter adds mysqld_exporter Agent.
     */
    async addMySQLdExporterRaw(requestParameters: AddMySQLdExporterRequest): Promise<runtime.ApiResponse<InlineResponse2006>> {
        if (requestParameters.body === null || requestParameters.body === undefined) {
            throw new runtime.RequiredError('body','Required parameter requestParameters.body was null or undefined when calling addMySQLdExporter.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        const response = await this.request({
            path: `/v1/inventory/Agents/AddMySQLdExporter`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: InlineObject6ToJSON(requestParameters.body),
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => InlineResponse2006FromJSON(jsonValue));
    }

    /**
     * AddMySQLdExporter adds mysqld_exporter Agent.
     */
    async addMySQLdExporter(requestParameters: AddMySQLdExporterRequest): Promise<InlineResponse2006> {
        const response = await this.addMySQLdExporterRaw(requestParameters);
        return await response.value();
    }

    /**
     * AddNodeExporter adds node_exporter Agent.
     */
    async addNodeExporterRaw(requestParameters: AddNodeExporterRequest): Promise<runtime.ApiResponse<InlineResponse2007>> {
        if (requestParameters.body === null || requestParameters.body === undefined) {
            throw new runtime.RequiredError('body','Required parameter requestParameters.body was null or undefined when calling addNodeExporter.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        const response = await this.request({
            path: `/v1/inventory/Agents/AddNodeExporter`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: InlineObject7ToJSON(requestParameters.body),
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => InlineResponse2007FromJSON(jsonValue));
    }

    /**
     * AddNodeExporter adds node_exporter Agent.
     */
    async addNodeExporter(requestParameters: AddNodeExporterRequest): Promise<InlineResponse2007> {
        const response = await this.addNodeExporterRaw(requestParameters);
        return await response.value();
    }

    /**
     * AddPMMAgent adds pmm-agent Agent.
     */
    async addPMMAgentRaw(requestParameters: AddPMMAgentRequest): Promise<runtime.ApiResponse<InlineResponse2008>> {
        if (requestParameters.body === null || requestParameters.body === undefined) {
            throw new runtime.RequiredError('body','Required parameter requestParameters.body was null or undefined when calling addPMMAgent.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        const response = await this.request({
            path: `/v1/inventory/Agents/AddPMMAgent`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: InlineObject8ToJSON(requestParameters.body),
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => InlineResponse2008FromJSON(jsonValue));
    }

    /**
     * AddPMMAgent adds pmm-agent Agent.
     */
    async addPMMAgent(requestParameters: AddPMMAgentRequest): Promise<InlineResponse2008> {
        const response = await this.addPMMAgentRaw(requestParameters);
        return await response.value();
    }

    /**
     * AddPostgresExporter adds postgres_exporter Agent.
     */
    async addPostgresExporterRaw(requestParameters: AddPostgresExporterRequest): Promise<runtime.ApiResponse<InlineResponse2009>> {
        if (requestParameters.body === null || requestParameters.body === undefined) {
            throw new runtime.RequiredError('body','Required parameter requestParameters.body was null or undefined when calling addPostgresExporter.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        const response = await this.request({
            path: `/v1/inventory/Agents/AddPostgresExporter`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: InlineObject9ToJSON(requestParameters.body),
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => InlineResponse2009FromJSON(jsonValue));
    }

    /**
     * AddPostgresExporter adds postgres_exporter Agent.
     */
    async addPostgresExporter(requestParameters: AddPostgresExporterRequest): Promise<InlineResponse2009> {
        const response = await this.addPostgresExporterRaw(requestParameters);
        return await response.value();
    }

    /**
     * AddProxySQLExporter adds proxysql_exporter Agent.
     */
    async addProxySQLExporterRaw(requestParameters: AddProxySQLExporterRequest): Promise<runtime.ApiResponse<InlineResponse20010>> {
        if (requestParameters.body === null || requestParameters.body === undefined) {
            throw new runtime.RequiredError('body','Required parameter requestParameters.body was null or undefined when calling addProxySQLExporter.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        const response = await this.request({
            path: `/v1/inventory/Agents/AddProxySQLExporter`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: InlineObject10ToJSON(requestParameters.body),
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => InlineResponse20010FromJSON(jsonValue));
    }

    /**
     * AddProxySQLExporter adds proxysql_exporter Agent.
     */
    async addProxySQLExporter(requestParameters: AddProxySQLExporterRequest): Promise<InlineResponse20010> {
        const response = await this.addProxySQLExporterRaw(requestParameters);
        return await response.value();
    }

    /**
     * AddQANMongoDBProfilerAgent adds MongoDB Profiler QAN Agent.
     */
    async addQANMongoDBProfilerAgentRaw(requestParameters: AddQANMongoDBProfilerAgentRequest): Promise<runtime.ApiResponse<InlineResponse20011>> {
        if (requestParameters.body === null || requestParameters.body === undefined) {
            throw new runtime.RequiredError('body','Required parameter requestParameters.body was null or undefined when calling addQANMongoDBProfilerAgent.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        const response = await this.request({
            path: `/v1/inventory/Agents/AddQANMongoDBProfilerAgent`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: InlineObject11ToJSON(requestParameters.body),
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => InlineResponse20011FromJSON(jsonValue));
    }

    /**
     * AddQANMongoDBProfilerAgent adds MongoDB Profiler QAN Agent.
     */
    async addQANMongoDBProfilerAgent(requestParameters: AddQANMongoDBProfilerAgentRequest): Promise<InlineResponse20011> {
        const response = await this.addQANMongoDBProfilerAgentRaw(requestParameters);
        return await response.value();
    }

    /**
     * AddQANMySQLPerfSchemaAgent adds MySQL PerfSchema QAN Agent.
     */
    async addQANMySQLPerfSchemaAgentRaw(requestParameters: AddQANMySQLPerfSchemaAgentRequest): Promise<runtime.ApiResponse<InlineResponse20012>> {
        if (requestParameters.body === null || requestParameters.body === undefined) {
            throw new runtime.RequiredError('body','Required parameter requestParameters.body was null or undefined when calling addQANMySQLPerfSchemaAgent.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        const response = await this.request({
            path: `/v1/inventory/Agents/AddQANMySQLPerfSchemaAgent`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: InlineObject12ToJSON(requestParameters.body),
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => InlineResponse20012FromJSON(jsonValue));
    }

    /**
     * AddQANMySQLPerfSchemaAgent adds MySQL PerfSchema QAN Agent.
     */
    async addQANMySQLPerfSchemaAgent(requestParameters: AddQANMySQLPerfSchemaAgentRequest): Promise<InlineResponse20012> {
        const response = await this.addQANMySQLPerfSchemaAgentRaw(requestParameters);
        return await response.value();
    }

    /**
     * AddQANMySQLSlowlogAgent adds MySQL PerfSchema QAN Agent.
     */
    async addQANMySQLSlowlogAgentRaw(requestParameters: AddQANMySQLSlowlogAgentRequest): Promise<runtime.ApiResponse<InlineResponse20013>> {
        if (requestParameters.body === null || requestParameters.body === undefined) {
            throw new runtime.RequiredError('body','Required parameter requestParameters.body was null or undefined when calling addQANMySQLSlowlogAgent.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        const response = await this.request({
            path: `/v1/inventory/Agents/AddQANMySQLSlowlogAgent`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: InlineObject13ToJSON(requestParameters.body),
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => InlineResponse20013FromJSON(jsonValue));
    }

    /**
     * AddQANMySQLSlowlogAgent adds MySQL PerfSchema QAN Agent.
     */
    async addQANMySQLSlowlogAgent(requestParameters: AddQANMySQLSlowlogAgentRequest): Promise<InlineResponse20013> {
        const response = await this.addQANMySQLSlowlogAgentRaw(requestParameters);
        return await response.value();
    }

    /**
     * AddQANPostgreSQLPgStatementsAgent adds PostgreSQL Pg Stat Statements QAN Agent.
     */
    async addQANPostgreSQLPgStatementsAgentRaw(requestParameters: AddQANPostgreSQLPgStatementsAgentRequest): Promise<runtime.ApiResponse<InlineResponse20014>> {
        if (requestParameters.body === null || requestParameters.body === undefined) {
            throw new runtime.RequiredError('body','Required parameter requestParameters.body was null or undefined when calling addQANPostgreSQLPgStatementsAgent.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        const response = await this.request({
            path: `/v1/inventory/Agents/AddQANPostgreSQLPgStatementsAgent`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: InlineObject14ToJSON(requestParameters.body),
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => InlineResponse20014FromJSON(jsonValue));
    }

    /**
     * AddQANPostgreSQLPgStatementsAgent adds PostgreSQL Pg Stat Statements QAN Agent.
     */
    async addQANPostgreSQLPgStatementsAgent(requestParameters: AddQANPostgreSQLPgStatementsAgentRequest): Promise<InlineResponse20014> {
        const response = await this.addQANPostgreSQLPgStatementsAgentRaw(requestParameters);
        return await response.value();
    }

    /**
     * AddRDSExporter adds rds_exporter Agent.
     */
    async addRDSExporterRaw(requestParameters: AddRDSExporterRequest): Promise<runtime.ApiResponse<InlineResponse20015>> {
        if (requestParameters.body === null || requestParameters.body === undefined) {
            throw new runtime.RequiredError('body','Required parameter requestParameters.body was null or undefined when calling addRDSExporter.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        const response = await this.request({
            path: `/v1/inventory/Agents/AddRDSExporter`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: InlineObject15ToJSON(requestParameters.body),
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => InlineResponse20015FromJSON(jsonValue));
    }

    /**
     * AddRDSExporter adds rds_exporter Agent.
     */
    async addRDSExporter(requestParameters: AddRDSExporterRequest): Promise<InlineResponse20015> {
        const response = await this.addRDSExporterRaw(requestParameters);
        return await response.value();
    }

    /**
     * ChangeExternalExporter changes external_exporter Agent.
     */
    async changeExternalExporterRaw(requestParameters: ChangeExternalExporterRequest): Promise<runtime.ApiResponse<InlineResponse2004>> {
        if (requestParameters.body === null || requestParameters.body === undefined) {
            throw new runtime.RequiredError('body','Required parameter requestParameters.body was null or undefined when calling changeExternalExporter.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        const response = await this.request({
            path: `/v1/inventory/Agents/ChangeExternalExporter`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: InlineObject16ToJSON(requestParameters.body),
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => InlineResponse2004FromJSON(jsonValue));
    }

    /**
     * ChangeExternalExporter changes external_exporter Agent.
     */
    async changeExternalExporter(requestParameters: ChangeExternalExporterRequest): Promise<InlineResponse2004> {
        const response = await this.changeExternalExporterRaw(requestParameters);
        return await response.value();
    }

    /**
     * ChangeMongoDBExporter changes mongodb_exporter Agent.
     */
    async changeMongoDBExporterRaw(requestParameters: ChangeMongoDBExporterRequest): Promise<runtime.ApiResponse<InlineResponse2005>> {
        if (requestParameters.body === null || requestParameters.body === undefined) {
            throw new runtime.RequiredError('body','Required parameter requestParameters.body was null or undefined when calling changeMongoDBExporter.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        const response = await this.request({
            path: `/v1/inventory/Agents/ChangeMongoDBExporter`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: InlineObject17ToJSON(requestParameters.body),
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => InlineResponse2005FromJSON(jsonValue));
    }

    /**
     * ChangeMongoDBExporter changes mongodb_exporter Agent.
     */
    async changeMongoDBExporter(requestParameters: ChangeMongoDBExporterRequest): Promise<InlineResponse2005> {
        const response = await this.changeMongoDBExporterRaw(requestParameters);
        return await response.value();
    }

    /**
     * ChangeMySQLdExporter changes mysqld_exporter Agent.
     */
    async changeMySQLdExporterRaw(requestParameters: ChangeMySQLdExporterRequest): Promise<runtime.ApiResponse<InlineResponse20016>> {
        if (requestParameters.body === null || requestParameters.body === undefined) {
            throw new runtime.RequiredError('body','Required parameter requestParameters.body was null or undefined when calling changeMySQLdExporter.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        const response = await this.request({
            path: `/v1/inventory/Agents/ChangeMySQLdExporter`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: InlineObject18ToJSON(requestParameters.body),
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => InlineResponse20016FromJSON(jsonValue));
    }

    /**
     * ChangeMySQLdExporter changes mysqld_exporter Agent.
     */
    async changeMySQLdExporter(requestParameters: ChangeMySQLdExporterRequest): Promise<InlineResponse20016> {
        const response = await this.changeMySQLdExporterRaw(requestParameters);
        return await response.value();
    }

    /**
     * ChangeNodeExporter changes node_exporter Agent.
     */
    async changeNodeExporterRaw(requestParameters: ChangeNodeExporterRequest): Promise<runtime.ApiResponse<InlineResponse2007>> {
        if (requestParameters.body === null || requestParameters.body === undefined) {
            throw new runtime.RequiredError('body','Required parameter requestParameters.body was null or undefined when calling changeNodeExporter.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        const response = await this.request({
            path: `/v1/inventory/Agents/ChangeNodeExporter`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: InlineObject19ToJSON(requestParameters.body),
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => InlineResponse2007FromJSON(jsonValue));
    }

    /**
     * ChangeNodeExporter changes node_exporter Agent.
     */
    async changeNodeExporter(requestParameters: ChangeNodeExporterRequest): Promise<InlineResponse2007> {
        const response = await this.changeNodeExporterRaw(requestParameters);
        return await response.value();
    }

    /**
     * ChangePostgresExporter changes postgres_exporter Agent.
     */
    async changePostgresExporterRaw(requestParameters: ChangePostgresExporterRequest): Promise<runtime.ApiResponse<InlineResponse2009>> {
        if (requestParameters.body === null || requestParameters.body === undefined) {
            throw new runtime.RequiredError('body','Required parameter requestParameters.body was null or undefined when calling changePostgresExporter.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        const response = await this.request({
            path: `/v1/inventory/Agents/ChangePostgresExporter`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: InlineObject20ToJSON(requestParameters.body),
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => InlineResponse2009FromJSON(jsonValue));
    }

    /**
     * ChangePostgresExporter changes postgres_exporter Agent.
     */
    async changePostgresExporter(requestParameters: ChangePostgresExporterRequest): Promise<InlineResponse2009> {
        const response = await this.changePostgresExporterRaw(requestParameters);
        return await response.value();
    }

    /**
     * ChangeProxySQLExporter changes proxysql_exporter Agent.
     */
    async changeProxySQLExporterRaw(requestParameters: ChangeProxySQLExporterRequest): Promise<runtime.ApiResponse<InlineResponse20010>> {
        if (requestParameters.body === null || requestParameters.body === undefined) {
            throw new runtime.RequiredError('body','Required parameter requestParameters.body was null or undefined when calling changeProxySQLExporter.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        const response = await this.request({
            path: `/v1/inventory/Agents/ChangeProxySQLExporter`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: InlineObject21ToJSON(requestParameters.body),
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => InlineResponse20010FromJSON(jsonValue));
    }

    /**
     * ChangeProxySQLExporter changes proxysql_exporter Agent.
     */
    async changeProxySQLExporter(requestParameters: ChangeProxySQLExporterRequest): Promise<InlineResponse20010> {
        const response = await this.changeProxySQLExporterRaw(requestParameters);
        return await response.value();
    }

    /**
     * ChangeQANMongoDBProfilerAgent changes MongoDB Profiler QAN Agent.
     */
    async changeQANMongoDBProfilerAgentRaw(requestParameters: ChangeQANMongoDBProfilerAgentRequest): Promise<runtime.ApiResponse<InlineResponse20011>> {
        if (requestParameters.body === null || requestParameters.body === undefined) {
            throw new runtime.RequiredError('body','Required parameter requestParameters.body was null or undefined when calling changeQANMongoDBProfilerAgent.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        const response = await this.request({
            path: `/v1/inventory/Agents/ChangeQANMongoDBProfilerAgent`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: InlineObject22ToJSON(requestParameters.body),
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => InlineResponse20011FromJSON(jsonValue));
    }

    /**
     * ChangeQANMongoDBProfilerAgent changes MongoDB Profiler QAN Agent.
     */
    async changeQANMongoDBProfilerAgent(requestParameters: ChangeQANMongoDBProfilerAgentRequest): Promise<InlineResponse20011> {
        const response = await this.changeQANMongoDBProfilerAgentRaw(requestParameters);
        return await response.value();
    }

    /**
     * ChangeQANMySQLPerfSchemaAgent changes MySQL PerfSchema QAN Agent.
     */
    async changeQANMySQLPerfSchemaAgentRaw(requestParameters: ChangeQANMySQLPerfSchemaAgentRequest): Promise<runtime.ApiResponse<InlineResponse20012>> {
        if (requestParameters.body === null || requestParameters.body === undefined) {
            throw new runtime.RequiredError('body','Required parameter requestParameters.body was null or undefined when calling changeQANMySQLPerfSchemaAgent.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        const response = await this.request({
            path: `/v1/inventory/Agents/ChangeQANMySQLPerfSchemaAgent`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: InlineObject23ToJSON(requestParameters.body),
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => InlineResponse20012FromJSON(jsonValue));
    }

    /**
     * ChangeQANMySQLPerfSchemaAgent changes MySQL PerfSchema QAN Agent.
     */
    async changeQANMySQLPerfSchemaAgent(requestParameters: ChangeQANMySQLPerfSchemaAgentRequest): Promise<InlineResponse20012> {
        const response = await this.changeQANMySQLPerfSchemaAgentRaw(requestParameters);
        return await response.value();
    }

    /**
     * ChangeQANMySQLSlowlogAgent changes MySQL PerfSchema QAN Agent.
     */
    async changeQANMySQLSlowlogAgentRaw(requestParameters: ChangeQANMySQLSlowlogAgentRequest): Promise<runtime.ApiResponse<InlineResponse20013>> {
        if (requestParameters.body === null || requestParameters.body === undefined) {
            throw new runtime.RequiredError('body','Required parameter requestParameters.body was null or undefined when calling changeQANMySQLSlowlogAgent.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        const response = await this.request({
            path: `/v1/inventory/Agents/ChangeQANMySQLSlowlogAgent`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: InlineObject24ToJSON(requestParameters.body),
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => InlineResponse20013FromJSON(jsonValue));
    }

    /**
     * ChangeQANMySQLSlowlogAgent changes MySQL PerfSchema QAN Agent.
     */
    async changeQANMySQLSlowlogAgent(requestParameters: ChangeQANMySQLSlowlogAgentRequest): Promise<InlineResponse20013> {
        const response = await this.changeQANMySQLSlowlogAgentRaw(requestParameters);
        return await response.value();
    }

    /**
     * ChangeQANPostgreSQLPgStatementsAgent changes PostgreSQL Pg Stat Statements QAN Agent.
     */
    async changeQANPostgreSQLPgStatementsAgentRaw(requestParameters: ChangeQANPostgreSQLPgStatementsAgentRequest): Promise<runtime.ApiResponse<InlineResponse20014>> {
        if (requestParameters.body === null || requestParameters.body === undefined) {
            throw new runtime.RequiredError('body','Required parameter requestParameters.body was null or undefined when calling changeQANPostgreSQLPgStatementsAgent.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        const response = await this.request({
            path: `/v1/inventory/Agents/ChangeQANPostgreSQLPgStatementsAgent`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: InlineObject25ToJSON(requestParameters.body),
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => InlineResponse20014FromJSON(jsonValue));
    }

    /**
     * ChangeQANPostgreSQLPgStatementsAgent changes PostgreSQL Pg Stat Statements QAN Agent.
     */
    async changeQANPostgreSQLPgStatementsAgent(requestParameters: ChangeQANPostgreSQLPgStatementsAgentRequest): Promise<InlineResponse20014> {
        const response = await this.changeQANPostgreSQLPgStatementsAgentRaw(requestParameters);
        return await response.value();
    }

    /**
     * ChangeRDSExporter changes rds_exporter Agent.
     */
    async changeRDSExporterRaw(requestParameters: ChangeRDSExporterRequest): Promise<runtime.ApiResponse<InlineResponse20015>> {
        if (requestParameters.body === null || requestParameters.body === undefined) {
            throw new runtime.RequiredError('body','Required parameter requestParameters.body was null or undefined when calling changeRDSExporter.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        const response = await this.request({
            path: `/v1/inventory/Agents/ChangeRDSExporter`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: InlineObject26ToJSON(requestParameters.body),
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => InlineResponse20015FromJSON(jsonValue));
    }

    /**
     * ChangeRDSExporter changes rds_exporter Agent.
     */
    async changeRDSExporter(requestParameters: ChangeRDSExporterRequest): Promise<InlineResponse20015> {
        const response = await this.changeRDSExporterRaw(requestParameters);
        return await response.value();
    }

    /**
     * GetAgent returns a single Agent by ID.
     */
    async getAgentRaw(requestParameters: GetAgentRequest): Promise<runtime.ApiResponse<InlineResponse20017>> {
        if (requestParameters.body === null || requestParameters.body === undefined) {
            throw new runtime.RequiredError('body','Required parameter requestParameters.body was null or undefined when calling getAgent.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        const response = await this.request({
            path: `/v1/inventory/Agents/Get`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: InlineObject27ToJSON(requestParameters.body),
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => InlineResponse20017FromJSON(jsonValue));
    }

    /**
     * GetAgent returns a single Agent by ID.
     */
    async getAgent(requestParameters: GetAgentRequest): Promise<InlineResponse20017> {
        const response = await this.getAgentRaw(requestParameters);
        return await response.value();
    }

    /**
     * ListAgents returns a list of all Agents.
     */
    async listAgentsRaw(requestParameters: ListAgentsRequest): Promise<runtime.ApiResponse<InlineResponse20018>> {
        if (requestParameters.body === null || requestParameters.body === undefined) {
            throw new runtime.RequiredError('body','Required parameter requestParameters.body was null or undefined when calling listAgents.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        const response = await this.request({
            path: `/v1/inventory/Agents/List`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: InlineObject28ToJSON(requestParameters.body),
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => InlineResponse20018FromJSON(jsonValue));
    }

    /**
     * ListAgents returns a list of all Agents.
     */
    async listAgents(requestParameters: ListAgentsRequest): Promise<InlineResponse20018> {
        const response = await this.listAgentsRaw(requestParameters);
        return await response.value();
    }

    /**
     * RemoveAgent removes Agent.
     */
    async removeAgentRaw(requestParameters: RemoveAgentRequest): Promise<runtime.ApiResponse<object>> {
        if (requestParameters.body === null || requestParameters.body === undefined) {
            throw new runtime.RequiredError('body','Required parameter requestParameters.body was null or undefined when calling removeAgent.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        const response = await this.request({
            path: `/v1/inventory/Agents/Remove`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: InlineObject29ToJSON(requestParameters.body),
        });

        return new runtime.JSONApiResponse<any>(response);
    }

    /**
     * RemoveAgent removes Agent.
     */
    async removeAgent(requestParameters: RemoveAgentRequest): Promise<object> {
        const response = await this.removeAgentRaw(requestParameters);
        return await response.value();
    }

}
