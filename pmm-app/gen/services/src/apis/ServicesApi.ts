/* tslint:disable */
/* eslint-disable */
/**
 * PMM API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: public
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import {
    InlineObject37,
    InlineObject37FromJSON,
    InlineObject37ToJSON,
    InlineObject38,
    InlineObject38FromJSON,
    InlineObject38ToJSON,
    InlineObject39,
    InlineObject39FromJSON,
    InlineObject39ToJSON,
    InlineObject40,
    InlineObject40FromJSON,
    InlineObject40ToJSON,
    InlineObject41,
    InlineObject41FromJSON,
    InlineObject41ToJSON,
    InlineObject42,
    InlineObject42FromJSON,
    InlineObject42ToJSON,
    InlineObject43,
    InlineObject43FromJSON,
    InlineObject43ToJSON,
    InlineObject44,
    InlineObject44FromJSON,
    InlineObject44ToJSON,
    InlineResponse20025,
    InlineResponse20025FromJSON,
    InlineResponse20025ToJSON,
    InlineResponse20026,
    InlineResponse20026FromJSON,
    InlineResponse20026ToJSON,
    InlineResponse20027,
    InlineResponse20027FromJSON,
    InlineResponse20027ToJSON,
    InlineResponse20028,
    InlineResponse20028FromJSON,
    InlineResponse20028ToJSON,
    InlineResponse20029,
    InlineResponse20029FromJSON,
    InlineResponse20029ToJSON,
    InlineResponse20030,
    InlineResponse20030FromJSON,
    InlineResponse20030ToJSON,
    InlineResponse20031,
    InlineResponse20031FromJSON,
    InlineResponse20031ToJSON,
    InlineResponseDefault1,
    InlineResponseDefault1FromJSON,
    InlineResponseDefault1ToJSON,
} from '../models';

export interface AddExternalServiceRequest {
    body: InlineObject37;
}

export interface AddMongoDBServiceRequest {
    body: InlineObject38;
}

export interface AddMySQLServiceRequest {
    body: InlineObject39;
}

export interface AddPostgreSQLServiceRequest {
    body: InlineObject40;
}

export interface AddProxySQLServiceRequest {
    body: InlineObject41;
}

export interface GetServiceRequest {
    body: InlineObject42;
}

export interface ListServicesRequest {
    body: InlineObject43;
}

export interface RemoveServiceRequest {
    body: InlineObject44;
}

/**
 * 
 */
export class ServicesApi extends runtime.BaseAPI {

    /**
     * AddExternalService adds External Service.
     */
    async addExternalServiceRaw(requestParameters: AddExternalServiceRequest): Promise<runtime.ApiResponse<InlineResponse20025>> {
        if (requestParameters.body === null || requestParameters.body === undefined) {
            throw new runtime.RequiredError('body','Required parameter requestParameters.body was null or undefined when calling addExternalService.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        const response = await this.request({
            path: `/v1/inventory/Services/AddExternalService`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: InlineObject37ToJSON(requestParameters.body),
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => InlineResponse20025FromJSON(jsonValue));
    }

    /**
     * AddExternalService adds External Service.
     */
    async addExternalService(requestParameters: AddExternalServiceRequest): Promise<InlineResponse20025> {
        const response = await this.addExternalServiceRaw(requestParameters);
        return await response.value();
    }

    /**
     * AddMongoDBService adds MongoDB Service.
     */
    async addMongoDBServiceRaw(requestParameters: AddMongoDBServiceRequest): Promise<runtime.ApiResponse<InlineResponse20026>> {
        if (requestParameters.body === null || requestParameters.body === undefined) {
            throw new runtime.RequiredError('body','Required parameter requestParameters.body was null or undefined when calling addMongoDBService.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        const response = await this.request({
            path: `/v1/inventory/Services/AddMongoDB`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: InlineObject38ToJSON(requestParameters.body),
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => InlineResponse20026FromJSON(jsonValue));
    }

    /**
     * AddMongoDBService adds MongoDB Service.
     */
    async addMongoDBService(requestParameters: AddMongoDBServiceRequest): Promise<InlineResponse20026> {
        const response = await this.addMongoDBServiceRaw(requestParameters);
        return await response.value();
    }

    /**
     * AddMySQLService adds MySQL Service.
     */
    async addMySQLServiceRaw(requestParameters: AddMySQLServiceRequest): Promise<runtime.ApiResponse<InlineResponse20027>> {
        if (requestParameters.body === null || requestParameters.body === undefined) {
            throw new runtime.RequiredError('body','Required parameter requestParameters.body was null or undefined when calling addMySQLService.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        const response = await this.request({
            path: `/v1/inventory/Services/AddMySQL`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: InlineObject39ToJSON(requestParameters.body),
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => InlineResponse20027FromJSON(jsonValue));
    }

    /**
     * AddMySQLService adds MySQL Service.
     */
    async addMySQLService(requestParameters: AddMySQLServiceRequest): Promise<InlineResponse20027> {
        const response = await this.addMySQLServiceRaw(requestParameters);
        return await response.value();
    }

    /**
     * AddPostgreSQLService adds PostgreSQL Service.
     */
    async addPostgreSQLServiceRaw(requestParameters: AddPostgreSQLServiceRequest): Promise<runtime.ApiResponse<InlineResponse20028>> {
        if (requestParameters.body === null || requestParameters.body === undefined) {
            throw new runtime.RequiredError('body','Required parameter requestParameters.body was null or undefined when calling addPostgreSQLService.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        const response = await this.request({
            path: `/v1/inventory/Services/AddPostgreSQL`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: InlineObject40ToJSON(requestParameters.body),
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => InlineResponse20028FromJSON(jsonValue));
    }

    /**
     * AddPostgreSQLService adds PostgreSQL Service.
     */
    async addPostgreSQLService(requestParameters: AddPostgreSQLServiceRequest): Promise<InlineResponse20028> {
        const response = await this.addPostgreSQLServiceRaw(requestParameters);
        return await response.value();
    }

    /**
     * AddProxySQLService adds ProxySQL Service.
     */
    async addProxySQLServiceRaw(requestParameters: AddProxySQLServiceRequest): Promise<runtime.ApiResponse<InlineResponse20029>> {
        if (requestParameters.body === null || requestParameters.body === undefined) {
            throw new runtime.RequiredError('body','Required parameter requestParameters.body was null or undefined when calling addProxySQLService.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        const response = await this.request({
            path: `/v1/inventory/Services/AddProxySQL`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: InlineObject41ToJSON(requestParameters.body),
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => InlineResponse20029FromJSON(jsonValue));
    }

    /**
     * AddProxySQLService adds ProxySQL Service.
     */
    async addProxySQLService(requestParameters: AddProxySQLServiceRequest): Promise<InlineResponse20029> {
        const response = await this.addProxySQLServiceRaw(requestParameters);
        return await response.value();
    }

    /**
     * GetService returns a single Service by ID.
     */
    async getServiceRaw(requestParameters: GetServiceRequest): Promise<runtime.ApiResponse<InlineResponse20030>> {
        if (requestParameters.body === null || requestParameters.body === undefined) {
            throw new runtime.RequiredError('body','Required parameter requestParameters.body was null or undefined when calling getService.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        const response = await this.request({
            path: `/v1/inventory/Services/Get`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: InlineObject42ToJSON(requestParameters.body),
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => InlineResponse20030FromJSON(jsonValue));
    }

    /**
     * GetService returns a single Service by ID.
     */
    async getService(requestParameters: GetServiceRequest): Promise<InlineResponse20030> {
        const response = await this.getServiceRaw(requestParameters);
        return await response.value();
    }

    /**
     * ListServices returns a list of all Services.
     */
    async listServicesRaw(requestParameters: ListServicesRequest): Promise<runtime.ApiResponse<InlineResponse20031>> {
        if (requestParameters.body === null || requestParameters.body === undefined) {
            throw new runtime.RequiredError('body','Required parameter requestParameters.body was null or undefined when calling listServices.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        const response = await this.request({
            path: `/v1/inventory/Services/List`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: InlineObject43ToJSON(requestParameters.body),
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => InlineResponse20031FromJSON(jsonValue));
    }

    /**
     * ListServices returns a list of all Services.
     */
    async listServices(requestParameters: ListServicesRequest): Promise<InlineResponse20031> {
        const response = await this.listServicesRaw(requestParameters);
        return await response.value();
    }

    /**
     * RemoveService removes Service.
     */
    async removeServiceRaw(requestParameters: RemoveServiceRequest): Promise<runtime.ApiResponse<object>> {
        if (requestParameters.body === null || requestParameters.body === undefined) {
            throw new runtime.RequiredError('body','Required parameter requestParameters.body was null or undefined when calling removeService.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        const response = await this.request({
            path: `/v1/inventory/Services/Remove`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: InlineObject44ToJSON(requestParameters.body),
        });

        return new runtime.JSONApiResponse<any>(response);
    }

    /**
     * RemoveService removes Service.
     */
    async removeService(requestParameters: RemoveServiceRequest): Promise<object> {
        const response = await this.removeServiceRaw(requestParameters);
        return await response.value();
    }

}
