/* tslint:disable */
/* eslint-disable */
/**
 * PMM QAN API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import {
    InlineObject2,
    InlineObject2FromJSON,
    InlineObject2ToJSON,
    InlineObject3,
    InlineObject3FromJSON,
    InlineObject3ToJSON,
    InlineObject4,
    InlineObject4FromJSON,
    InlineObject4ToJSON,
    InlineResponse2003,
    InlineResponse2003FromJSON,
    InlineResponse2003ToJSON,
    InlineResponse2004,
    InlineResponse2004FromJSON,
    InlineResponse2004ToJSON,
    InlineResponse2005,
    InlineResponse2005FromJSON,
    InlineResponse2005ToJSON,
    InlineResponseDefault,
    InlineResponseDefaultFromJSON,
    InlineResponseDefaultToJSON,
} from '../models';

export interface GetLabelsRequest {
    body: InlineObject2;
}

export interface GetMetricsRequest {
    body: InlineObject3;
}

export interface GetQueryExampleRequest {
    body: InlineObject4;
}

/**
 * 
 */
export class ObjectDetailsApi extends runtime.BaseAPI {

    /**
     * GetLabels gets list of labels for object details.
     */
    async getLabelsRaw(requestParameters: GetLabelsRequest): Promise<runtime.ApiResponse<InlineResponse2003>> {
        if (requestParameters.body === null || requestParameters.body === undefined) {
            throw new runtime.RequiredError('body','Required parameter requestParameters.body was null or undefined when calling getLabels.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/v0/qan/ObjectDetails/GetLabels`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: InlineObject2ToJSON(requestParameters.body),
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => InlineResponse2003FromJSON(jsonValue));
    }

    /**
     * GetLabels gets list of labels for object details.
     */
    async getLabels(requestParameters: GetLabelsRequest): Promise<InlineResponse2003> {
        const response = await this.getLabelsRaw(requestParameters);
        return await response.value();
    }

    /**
     * GetMetrics gets map of metrics for specific filtering.
     */
    async getMetricsRaw(requestParameters: GetMetricsRequest): Promise<runtime.ApiResponse<InlineResponse2004>> {
        if (requestParameters.body === null || requestParameters.body === undefined) {
            throw new runtime.RequiredError('body','Required parameter requestParameters.body was null or undefined when calling getMetrics.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/v0/qan/ObjectDetails/GetMetrics`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: InlineObject3ToJSON(requestParameters.body),
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => InlineResponse2004FromJSON(jsonValue));
    }

    /**
     * GetMetrics gets map of metrics for specific filtering.
     */
    async getMetrics(requestParameters: GetMetricsRequest): Promise<InlineResponse2004> {
        const response = await this.getMetricsRaw(requestParameters);
        return await response.value();
    }

    /**
     * GetQueryExample gets list of query examples.
     */
    async getQueryExampleRaw(requestParameters: GetQueryExampleRequest): Promise<runtime.ApiResponse<InlineResponse2005>> {
        if (requestParameters.body === null || requestParameters.body === undefined) {
            throw new runtime.RequiredError('body','Required parameter requestParameters.body was null or undefined when calling getQueryExample.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/v0/qan/ObjectDetails/GetQueryExample`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: InlineObject4ToJSON(requestParameters.body),
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => InlineResponse2005FromJSON(jsonValue));
    }

    /**
     * GetQueryExample gets list of query examples.
     */
    async getQueryExample(requestParameters: GetQueryExampleRequest): Promise<InlineResponse2005> {
        const response = await this.getQueryExampleRaw(requestParameters);
        return await response.value();
    }

}
